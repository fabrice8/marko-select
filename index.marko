
class {
  onCreate(){
    this.state = {
                  active: false,
                  value: '',
                  options: [],
                  xOptions: [],
                  target: 0
                }

    // Unique index of this select input in the document
    this.selectIndex = 'select-'+ random( 10, 999999 )
  }
  onInput({ size, value, options }){
    
    this.state.options = options
    this.emit('option-change')

    if( value )
      for( let i = 0; i < options.length; i++ )
        if( options[i].value == value ){
          this.state.value = options[i].label || options[i].value
          break
        }
    else this.state.value = ''

    // height of select input
    switch( size ){
      case 'xl': this.styles = { 
                    height: 65, 
                    round: 40 
                  }
          break
      case 'lg': this.styles = { 
                    height: 50, 
                    round: 30 
                  }
          break
      case 'sm': this.styles = {
                    height: 30, 
                    round: 15 
                  }
          break

      case 'md': 
      default: this.styles = { 
                    height: 45, 
                    round: 25 
                  }
    }
  }
  onMount(){ if( this.input.autoFocus ) $( this.getEl('in-input') ).focus() }

  isActive(){
    const is_active = this.state.active || $( this.getEl('in-input') ).is(':focus') 

    this.emit( is_active ? 'menu-open' : 'menu-close')
    return is_active
  }
  onToggle( status ){
    this.state.active = status
    this.state.xOptions = []
  }
  onKeyword( e ){

    if( !e.target.value ){
      this.state.xOptions = []
      return
    }

    this.state.value = e.target.value

    if( this.input.searchable )
      try {
        this.state.xOptions = this.state.options.filter( ({ label, value }) => {
                                return new RegExp( '^'+ e.target.value, 'i' ).test( label || value )
                              } )
      }
      catch( error ){}
  }
  onKeySelect( e ){
    // Navigate options Up and Down with keyboard
    if( !this.state.active
        || ![ 38, 40, 13 ].includes( e.keyCode ) ) return

    const options = this.state.xOptions.length ? this.state.xOptions : this.state.options
    switch( e.keyCode ){
      // Validate the targeted option
      case 13: this.onSelect( this.state.target ); break
      // Navigate options up
      case 38: if( this.state.target > 0 ) this.state.target--; break
      // Navigate options down
      case 40: if( this.state.target < options.length - 1 ) this.state.target++; break
    }
  }
  onIngore( e ){
    // Close option list at external click
    if( !$(e.target).closest('#'+ this.selectIndex +'.marko--select-input').length )
      this.state.active = false
  }
  onSelect( index ){

    const option = ( this.state.xOptions.length ? this.state.xOptions : this.state.options )[ index ]
    this.state.value = option.label || option.value

    this.getEl('in-input').blur()
    this.state.active = false

    this.emit( 'change', this.input.returnAll ? option : option.value )
  }
}

<div.marko--select-container style=`z-index:${state.active ? 3 : 2};height:${component.styles.height}px;`>
  <div.marko--select-input id=component.selectIndex class=input.class>
    <div.position-relative.zindex-1>
      <input key="in-input"
              type="text"
              class=input.inputClass
              placeholder=( input.placeholder || 'Select Options' )
              value=state.value
              disabled=input.disabled
              no-update-if( state.active )
              on-focus('onToggle', true )
              on-keyup('onKeyword')>
      <!-- Caret icon -->
      <!-- <if( state.options.length )>
        <button class=`btn btn-icon ${ input.size == 'xl' ? ' mt-1 mr-1' : 'm-0' }`
                type="button"
                on-click( 'onToggle', !state.active )>
          <i class=`bx bx-chevron-down font-large-1 grey-text ${ component.isActive() ? 'up' : '' }`></i>
        </button>
      </if> -->

      <!-- To close select input with click outside in the document -->
      <subscribe to=document on-click('onIngore')/>
      <!-- Navigate and select Options with "Up, Down - Enter" keyboard -->
      <subscribe to=document on-keyup('onKeySelect')/>
    </div>

    <if( component.isActive() )>
      <AutoScroll.marko--select-menu 
                  class=input.menuClass 
                  style=`max-height:${ input.menuHeight || '220px' }`>
        <ul>
          <for|{ label, value }, index| of=( state.xOptions.length ? state.xOptions : state.options )>
            <if( ( label || value ) !== state.value )>
              <li.option-item
                  key=`opt-${index}`
                  class=(state.target == index ? 'selected' : false )
                  data-value=value
                  on-click( 'onSelect', index )>${( label || value ).toCapitalCase()}</li>
            </if>
          </for>
        </ul>
      </AutoScroll>
    </if>
  </div>
</div>
